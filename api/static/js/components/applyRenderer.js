// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ—Ç–∫–ª–∏–∫–æ–≤
class ApplyRenderer {
    constructor(containerId = 'applies-list') {
        this.container = document.getElementById(containerId);
        this.noAppliesContainer = document.getElementById('no-applies');
        this.currentUsername = null;
    }

    // –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤
    render(applies, username) {
        this.currentUsername = username;
        
        if (!applies || applies.length === 0) {
            this.showNoApplies();
            return;
        }

        this.hideNoApplies();
        this.container.innerHTML = this.createAppliesListHTML(applies, username);
        this.attachEventListeners();
    }

    // –°–æ–∑–¥–∞–µ—Ç HTML –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤
    createAppliesListHTML(applies, username) {
        const appliesHTML = applies.map(apply => this.createApplyItemHTML(apply)).join('');
        
        return `
            <div class="applies-header">
                <h3>–û—Ç–∫–ª–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username}:</h3>
                <span class="applies-count">${applies.length} –æ—Ç–∫–ª–∏–∫–æ–≤</span>
            </div>
            <div class="applies-grid">
                ${appliesHTML}
            </div>
        `;
    }

    // –°–æ–∑–¥–∞–µ—Ç HTML –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
    createApplyItemHTML(apply) {
        const createdDate = this.formatDate(apply.created_at);
        const escapedName = this.escapeHtml(apply.name);
        
        return `
            <div class="apply-item" id="apply-${apply.id}" data-apply-id="${apply.id}">
                <div class="apply-header">
                    <div class="apply-title">${escapedName}</div>
                    <div class="apply-actions">
                        <button class="delete-btn" data-apply-id="${apply.id}" data-apply-name="${escapedName}">
                            üóëÔ∏è
                        </button>
                    </div>
                </div>
                <div class="apply-meta">
                    <span class="apply-date">üìÖ –°–æ–∑–¥–∞–Ω: ${createdDate}</span>
                </div>
                <div class="apply-link-container">
                    <a href="${apply.link}" class="apply-link" target="_blank" rel="noopener noreferrer">
                        üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏
                    </a>
                </div>
                ${apply.description ? `<div class="apply-description">${this.escapeHtml(apply.description)}</div>` : ''}
            </div>
        `;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É

    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    attachEventListeners() {
        const deleteButtons = this.container.querySelectorAll('.delete-btn');
        
        deleteButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                const applyId = button.dataset.applyId;
                const applyName = button.dataset.applyName;
                this.handleDelete(applyId, applyName);
            });
        });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞
    async handleDelete(applyId, applyName) {
        if (!confirm(`–£–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª–∏–∫ "${applyName}"?`)) {
            return;
        }

        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
            const button = this.container.querySelector(`[data-apply-id="${applyId}"]`);
            const originalText = button.innerHTML;
            button.innerHTML = '‚è≥';
            button.disabled = true;

            await applyClient.deleteApply(applyId);
            
            // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            const applyElement = this.container.querySelector(`#apply-${applyId}`);
            if (applyElement) {
                await this.animateRemove(applyElement);
            }

            messageManager.success('–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            this.updateAppliesCount();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞:', error);
            messageManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            const button = this.container.querySelector(`[data-apply-id="${applyId}"]`);
            if (button) {
                button.innerHTML = 'üóëÔ∏è';
                button.disabled = false;
            }
        }
    }

    // –ê–Ω–∏–º–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    async animateRemove(element) {
        element.style.transition = 'all 0.3s ease';
        element.style.opacity = '0';
        element.style.transform = 'scale(0.8)';
        
        await new Promise(resolve => setTimeout(resolve, 300));
        element.remove();
    }

    // –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–æ–≤
    updateAppliesCount() {
        const countElement = this.container.querySelector('.applies-count');
        const applyItems = this.container.querySelectorAll('.apply-item');
        
        if (countElement) {
            countElement.textContent = `${applyItems.length} –æ—Ç–∫–ª–∏–∫–æ–≤`;
        }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤
    showNoApplies() {
        this.container.classList.add('hidden');
        this.noAppliesContainer.classList.remove('hidden');
    }

    // –°–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤
    hideNoApplies() {
        this.container.classList.remove('hidden');
        this.noAppliesContainer.classList.add('hidden');
    }

    // –û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    clear() {
        this.container.innerHTML = '';
        this.currentUsername = null;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoading() {
        this.container.innerHTML = `
            <div class="loading-applies">
                <div class="spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤...</p>
            </div>
        `;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
    showError(message) {
        this.container.innerHTML = `
            <div class="error-applies">
                <div class="error-icon">‚ùå</div>
                <p>${message}</p>
            </div>
        `;
    }
} 