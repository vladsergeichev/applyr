services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB__USER}
      POSTGRES_PASSWORD: ${DB__PASSWORD}
      POSTGRES_DB: ${DB__NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB__USER} -d ${DB__NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - applyr_network

  api:
    build: ./api
    container_name: api
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      DB__HOST: ${DB__HOST}
      DB__PORT: ${DB__PORT}
      DB__NAME: ${DB__NAME}
      DB__USER: ${DB__USER}
      DB__PASSWORD: ${DB__PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
    volumes:
      - ./api:/opt/applyr_api
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - applyr_network

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.local.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl.local:/etc/nginx/ssl:ro
      - ./static:/etc/static
    depends_on:
      - api
    networks:
      - applyr_network

  bot:
    build: ./bot
    container_name: bot
    environment:
      API_URL: ${API_URL}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      LOG_LEVEL: ${LOG_LEVEL}
    depends_on:
      - api
    networks:
      - applyr_network

volumes:
  postgres_data:

networks:
  applyr_network:
    driver: bridge