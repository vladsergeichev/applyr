services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - applyr_network

  api:
    image: applyr.cr.cloud.ru/applyr-api:latest
    environment:
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      LOG_LEVEL: ${LOG_LEVEL}
      SECRET_KEY: ${SECRET_KEY}
      USE_HTTPS: ${USE_HTTPS:-true}
      ENVIRONMENT: production
      DOMAIN: ${DOMAIN}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - applyr_network

  nginx:
    build: ./nginx
    ports:
      - "80:80"
      - "443:443"
    environment:
      DOMAIN: ${DOMAIN}
      EMAIL: ${EMAIL}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    depends_on:
      - api
    networks:
      - applyr_network

  certbot:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/html --email ${EMAIL:-"vladsergeichev@gmail.com"} --agree-tos --no-eff-email -d ${DOMAIN:-"applyr.vladsergeichev.ru"}
    depends_on:
      - nginx
    networks:
      - applyr_network

  bot:
    build: ./bot
    environment:
      API_URL: ${API_URL}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      LOG_LEVEL: ${LOG_LEVEL}
    depends_on:
      - api
    networks:
      - applyr_network

volumes:
  postgres_data:
  certbot-etc:
  certbot-var:

networks:
  applyr_network:
    driver: bridge